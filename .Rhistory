### state, the death state can be reached from the progression state and no further
### movement is possible from the death state
tmat <- transMat(list(c(2,3), 3, c()),
names = c("progression-free", "progression", "death"))
tmat
list(c(2,3), 3, c())
### create transition matrix with death split into two states
tmat2 <- transMat(x = list(c(2, 4), c(3), c(), c()),
names=c("PFS", "prog",
"death after prog", "death without prog"))
tmat2
### create dataset that can be used for multi-state modelling
covs <- c("treat","prog_ty")
msmcancer <- msprep(time=c(NA, "prog_ty", "death_ty"),
status=c(NA, "prog", "death"),
data=data,
trans=tmat,
keep=covs)
msmcancer
?msprep
### create datasets specific to each transition
msmcancer1<-subset(msmcancer,trans==1)
msmcancer2<-subset(msmcancer,trans==2)
msmcancer3<-subset(msmcancer,trans==3)
msmcancer1FC<-subset(msmcancer1,treat==0)
msmcancer2FC<-subset(msmcancer2,treat==0)
msmcancer3FC<-subset(msmcancer3,treat==0)
msmcancer1RFC<-subset(msmcancer1,treat==1)
msmcancer2RFC<-subset(msmcancer2,treat==1)
msmcancer3RFC<-subset(msmcancer3,treat==1)
pdf('log-log plots.pdf', width=12, height=12)
par(mfrow=c(2,2))
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i", ylim=c(-6,-2),
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$surv)), lty=2)
legend(-4,-3, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(b) progression-free -> death", cex.main=1.5)
par(mfrow=c(2,2))
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
pdf('log-log plots.pdf', width=12, height=12)
par(mfrow=c(2,2))
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
par(mfrow=c(2,2))
plot(log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i", ylim=c(-6,-2),
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$surv)), lty=2)
legend(-4,-3, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(b) progression-free -> death", cex.main=1.5)
a <- plot(log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
a
?plot
plot(log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$surv)),
type="l",
xlab="log(time)",
ylab="log(Cumulative hazard)",
las=1, cex.lab=1.5, cex.axis=1.5)
plot(log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$surv)),
type="l",
xlab="log(time)",
ylab="log(Cumulative hazard)")
library(mstate)
library(eha)
library(caTools)
library(mc2d)
library(msm)
library(cmprsk)
library(flexsurv)
library(BBmisc)
### READ FUNCTIONS INTO R
source("function modelparam.R")
source("function Markov.R")
source("function semiMarkov.R")
source("function visualMarkov.R")
source("function visualsemiMarkov.R")
#source("function proportion.R") not run - requires actual data
source("function meanLY.R")
source("function PSAprob.R")
source("function PSAmeanLY.R")
source("function PSAQALY.R")
source("function CEplane.R")
source("function CEAC.R")
### READ IN DATA
#==============================================================================
# NOTE - THE DATASET USED IN THIS ILLUSTRATION IS NOT ACTUAL TRIAL DATA, BUT
# HAS BEEN GENERATED BY DIGITISING PUBLISHED KAPLAN-MEIER CURVES. THEREFORE
# PATIENT IDENTIFIERS (PATID) ARE NOT AVAILABLE. ALSO VARIABLES ON THE SAME ROW,
# SUCH AS TIME AND STATUS FOR DIFFERENT EVENTS, DO NOT NECESSARILY RELATE TO
# THE SAME PATIENT. IT IS NOT POSSIBLE TO ACCURATELY REFLECT A
# "ONE PATIENT - ONE ROW" DATASET FOR THE MODEL IN THIS ILLUSTRATION WITHOUT THE
# ACTUAL TRIAL DATA.
# THE  VARIABLE HAS BEEN ADDED FROM THE REAL DATA TO ALLOW STATE-ARRIVAL
# EXTENDED MODELLING
#==============================================================================
data <- read.table("data.txt",sep="\t",skip=1)
names(data) = c("patid","treat",
"prog","death",
"prog_t","death_t",
"progdeath",
"progdeath_t")
data %>% glimpse()
### variables in the dataset are:
### patid          patient identification number
### treat          treatment    0=FC, 1=RFC
### prog           progression  0=no, 1=yes
### death          death        0=no, 1=yes
### prog_t         time (in months) to progression or last known not to have a progression
### death_t        time (in months) to death or last known to be alive
### progdeath      progression or death 0=no, 1=yes
### progdeath_t    time (in months) to progression or death or last known to be alive
###                without progression
### convert times from months to years
data$prog_ty <- data$prog_t/12
data$death_ty <- data$death_t/12
data$progdeath_ty <- data$progdeath_t/12
### create data subsets based on treatment arm
RFCdata <- subset(data, treat==1)
FCdata <- subset(data, treat==0)
### create competing risk indicatior
### 0=did not die or have a progression, 1=had a progression, 2=died without progression
RFCdata$crstatus <- 0
RFCdata$crstatus[RFCdata$prog==1] <- 1
RFCdata$crstatus[RFCdata$prog==0 & RFCdata$death==1] <- 2
FCdata$crstatus <- 0
FCdata$crstatus[FCdata$prog==1] <- 1
FCdata$crstatus[FCdata$prog==0 & FCdata$death==1] <- 2
### create data subset for those who had progression
RFCdataprog <- subset(RFCdata, prog==1)
RFCdataprog$time <- RFCdataprog$death_ty-RFCdataprog$prog_ty
#######  ILLNESS-DEATH MODEL DATA PREPARATION WITH MSTATE
### create transition matrix
### sets up a matrix that shows the states that can be reached from each state. In this
### example the states progression and death can be reached from the progression-free
### state, the death state can be reached from the progression state and no further
### movement is possible from the death state
tmat <- transMat(list(c(2,3), 3, c()),
names = c("progression-free", "progression", "death"))
tmat
### create transition matrix with death split into two states
tmat2 <- transMat(x = list(c(2, 4), c(3), c(), c()),
names=c("PFS", "prog",
"death after prog", "death without prog"))
tmat2
### create dataset that can be used for multi-state modelling
covs <- c("treat","prog_ty")
msmcancer <- msprep(time=c(NA, "prog_ty", "death_ty"),
status=c(NA, "prog", "death"),
data=data,
trans=tmat,
keep=covs)
### create datasets specific to each transition
msmcancer1 <- subset(msmcancer,trans==1)
msmcancer2 <- subset(msmcancer,trans==2)
msmcancer3 <- subset(msmcancer,trans==3)
### create data subsets based on treatment arm
msmcancer1FC <- subset(msmcancer1,treat==0)
msmcancer2FC <- subset(msmcancer2,treat==0)
msmcancer3FC <- subset(msmcancer3,treat==0)
msmcancer1RFC <- subset(msmcancer1,treat==1)
msmcancer2RFC <- subset(msmcancer2,treat==1)
msmcancer3RFC <- subset(msmcancer3,treat==1)
?pdf
pdf('log-log plots.pdf', width=12, height=12)
par(mfrow=c(2,2))
plot(log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$time),
log(-log(survfit(Surv(time,status) ~ 1, data=msmcancer1RFC)$surv)),
type="l",
xlab="log(time)",
ylab="log(Cumulative hazard)",
xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i", ylim=c(-6,-2),
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$surv)), lty=2)
legend(-4,-3, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(b) progression-free -> death", cex.main=1.5)
plot(log(survfit(Surv(time,status)~ 1, data=msmcancer3RFC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer3RFC)$surv)), type="l",
xlab="log(time)", ylab="log(Cumulative hazard)", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5)
lines(log(survfit(Surv(time,status)~ 1, data=msmcancer3FC)$time),
log(-log(survfit(Surv(time,status)~ 1, data=msmcancer3FC)$surv)), lty=2)
legend(-4,-2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(c) progression -> death", cex.main=1.5)
dev.off()
pdf('cum haz plots.pdf', width=12, height=12)
par(mfrow=c(2,2))
par(mar= c(5, 7, 4, 2)+0.1)
plot(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$time,
-log(survfit(Surv(time,status)~ 1, data=msmcancer1RFC)$surv), type="l",
xlab="time", ylab="Cumulative hazard", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5, col=1)
lines(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$time,
-log(survfit(Surv(time,status)~ 1, data=msmcancer1FC)$surv), lty=2)
legend(1, 0.6, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(a) progression-free -> progression", cex.main=1.5)
###================================================================
### CUMULATIVE HAZARD PLOT:  I.E. -LOG(KM SURVIVAL) progression-free -> death
###================================================================
plot(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$time,
-log(survfit(Surv(time,status)~ 1, data=msmcancer2RFC)$surv), type="l",
xlab="time", ylab="", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5, col=1)
lines(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$time,
-log(survfit(Surv(time,status)~ 1, data=msmcancer2FC)$surv), lty=2)
title(main="(b) progression-free -> death", cex.main=1.5)
legend(2,0.02, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(ylab="Cumulative hazard",cex.lab = 1.5,line = 4.5)
###================================================================
### CUMULATIVE HAZARD PLOT:  I.E. -LOG(KM SURVIVAL) progression-> death
###================================================================
plot(survfit(Surv(time,status)~ 1, data=msmcancer3RFC)$time,
-log(survfit(Surv(time,status)~ 1, data=msmcancer3RFC)$surv), type="l",
xlab="time", ylab="Cumulative hazard", xaxs="i",yaxs="i",
las=1,cex.lab=1.5, cex.axis=1.5, col=1)
lines(survfit(Surv(time,status)~ 1, data=msmcancer3FC)$time,
-log(survfit(Surv(time,status)~ 1, data=msmcancer3FC)$surv), lty=2)
legend(2,0.2, c("FC", "RFC"), bty="n", lty=c(2,1), cex=1.5)
title(main="(c) progression -> death", cex.main=1.5)
dev.off()
# code shown for illustration only. Markov modelling not appropriate with digitised data.
# results in tutorial paper were based on actual trial data
CoxMarkov <- coxph(Surv(Tstart,Tstop,status)~treat+prog_ty,
data=msmcancer3,method = "breslow")
msmcancer3
summary(CoxMarkov)
?coxph
library(mstate)
library(eha)
library(caTools)
library(mc2d)
library(msm)
library(cmprsk)
library(flexsurv)
library(BBmisc)
### READ FUNCTIONS INTO R
source("function modelparam.R")
source("function Markov.R")
source("function semiMarkov.R")
source("function visualMarkov.R")
source("function visualsemiMarkov.R")
#source("function proportion.R") not run - requires actual data
source("function meanLY.R")
source("function PSAprob.R")
source("function PSAmeanLY.R")
source("function PSAQALY.R")
source("function CEplane.R")
source("function CEAC.R")
### READ IN DATA
#==============================================================================
# NOTE - THE DATASET USED IN THIS ILLUSTRATION IS NOT ACTUAL TRIAL DATA, BUT
# HAS BEEN GENERATED BY DIGITISING PUBLISHED KAPLAN-MEIER CURVES. THEREFORE
# PATIENT IDENTIFIERS (PATID) ARE NOT AVAILABLE. ALSO VARIABLES ON THE SAME ROW,
# SUCH AS TIME AND STATUS FOR DIFFERENT EVENTS, DO NOT NECESSARILY RELATE TO
# THE SAME PATIENT. IT IS NOT POSSIBLE TO ACCURATELY REFLECT A
# "ONE PATIENT - ONE ROW" DATASET FOR THE MODEL IN THIS ILLUSTRATION WITHOUT THE
# ACTUAL TRIAL DATA.
# THE  VARIABLE HAS BEEN ADDED FROM THE REAL DATA TO ALLOW STATE-ARRIVAL
# EXTENDED MODELLING
#==============================================================================
data <- read.table("data.txt",sep="\t",skip=1)
names(data) = c("patid","treat",
"prog","death",
"prog_t","death_t",
"progdeath",
"progdeath_t")
data %>% glimpse()
### variables in the dataset are:
### patid          patient identification number
### treat          treatment    0=FC, 1=RFC
### prog           progression  0=no, 1=yes
### death          death        0=no, 1=yes
### prog_t         time (in months) to progression or last known not to have a progression
### death_t        time (in months) to death or last known to be alive
### progdeath      progression or death 0=no, 1=yes
### progdeath_t    time (in months) to progression or death or last known to be alive
###                without progression
### convert times from months to years
data$prog_ty <- data$prog_t/12
data$death_ty <- data$death_t/12
data$progdeath_ty <- data$progdeath_t/12
### create data subsets based on treatment arm
RFCdata <- subset(data, treat==1)
FCdata <- subset(data, treat==0)
### create competing risk indicatior
### 0=did not die or have a progression, 1=had a progression, 2=died without progression
RFCdata$crstatus <- 0
RFCdata$crstatus[RFCdata$prog==1] <- 1
RFCdata$crstatus[RFCdata$prog==0 & RFCdata$death==1] <- 2
FCdata$crstatus <- 0
FCdata$crstatus[FCdata$prog==1] <- 1
FCdata$crstatus[FCdata$prog==0 & FCdata$death==1] <- 2
### create data subset for those who had progression
RFCdataprog <- subset(RFCdata, prog==1)
RFCdataprog$time <- RFCdataprog$death_ty-RFCdataprog$prog_ty
#######  ILLNESS-DEATH MODEL DATA PREPARATION WITH MSTATE
### create transition matrix
### sets up a matrix that shows the states that can be reached from each state. In this
### example the states progression and death can be reached from the progression-free
### state, the death state can be reached from the progression state and no further
### movement is possible from the death state
tmat <- transMat(list(c(2,3), 3, c()),
names = c("progression-free", "progression", "death"))
tmat
### create transition matrix with death split into two states
tmat2 <- transMat(x = list(c(2, 4), c(3), c(), c()),
names=c("PFS", "prog",
"death after prog", "death without prog"))
tmat2
### create dataset that can be used for multi-state modelling
covs <- c("treat","prog_ty")
msmcancer <- msprep(time=c(NA, "prog_ty", "death_ty"),
status=c(NA, "prog", "death"),
data=data,
trans=tmat,
keep=covs)
### create datasets specific to each transition
msmcancer1 <- subset(msmcancer,trans==1)
msmcancer2 <- subset(msmcancer,trans==2)
msmcancer3 <- subset(msmcancer,trans==3)
### create data subsets based on treatment arm
msmcancer1FC <- subset(msmcancer1,treat==0)
msmcancer2FC <- subset(msmcancer2,treat==0)
msmcancer3FC <- subset(msmcancer3,treat==0)
msmcancer1RFC <- subset(msmcancer1,treat==1)
msmcancer2RFC <- subset(msmcancer2,treat==1)
msmcancer3RFC <- subset(msmcancer3,treat==1)
CoxMarkov <- coxph(Surv(Tstart,Tstop,status) ~ treat+prog_ty,
data=msmcancer3, method = "breslow")
summary(CoxMarkov)
modelparam()
### Markov Weibull model for transition 3 with treatment as only covariate
modelparam(Markov=TRUE) # code shown for illustration only. Markov modelling not
# appropriate with digitised data
### expontential model for transition 3 with treatment as only covariate
modelparam(dist="exp")
### semi-Markov gompertz  model for transition 3 with treatment as only covariate
modelparam(dist="gom")
### semi-Markov loglogistic  model for transition 3 with treatment as only covariate
modelparam(dist="logl")
### semi-Markov lognormal  model for transition 3 with treatment as only covariate
modelparam(dist="logn")
### semi-Markov generalised gamma  model for transition 3 with treatment as only covariate
modelparam(dist="gam")
### semi-Markov Weibull model for transition 2 with treatment as only covariate
modelparam(transnum=2)
source("assessment of fit for prog to death.R", echo=TRUE)
source("building all combinations of msms.R",echo=TRUE)
save.image("allcombos.RData")
load("allcombos.RData")
ptm <- proc.time() #start counting the time it takes
gom1gam2gom3simRFC <- semiMarkov(ncovs=c(1,1,1),
covs=rbind("treat", "treat", "treat"),
coveval=rbind(1,1,1),
dist=cbind("gom", "gam", "gom"),
timeseq=seq(0,4,1/12),
timeseq_ext=c(seq(49/12,100/12,1/12), seq(100/12+1/144, 12, 1/144),
seq(12+1/600,15, 1/600)),
trans=tmat2, M=5000)
(proc.time() - ptm) #stop counting the time it took (seconds)
(proc.time() - ptm)/60 #stop counting the time it took (minutes)
(proc.time() - ptm)/3600 #stop counting the time it took (hours)
save.image("basecase15gom1gam2gom3.RData")
load("basecase15gom1gam2gom3.RData")
is.wholenumber <- function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol
?round
gom1gam2gom3simRFCmon <- gom1gam2gom3simRFC
is.wholenumber
gom1gam2gom3simRFCmon
.Machine$double.eps
.Machine$double.eps^0.5
gom1gam2gom3simRFCmon <- subset(gom1gam2gom3simRFCmon,is.wholenumber(gom1gam2gom3simRFCmon[,1]*12)==1)
gom1gam2gom3simFCmon <- gom1gam2gom3simFC
gom1gam2gom3simFCmon <- subset(gom1gam2gom3simFCmon,is.wholenumber(gom1gam2gom3simFCmon[,1]*12)==1)
gom1gam2gom3simRFCmon <- gom1gam2gom3simRFC
gom1gam2gom3simRFCmon <- subset(gom1gam2gom3simRFCmon,is.wholenumber(gom1gam2gom3simRFCmon[,1]*12)==1)
gom1gam2gom3simFCmon <- gom1gam2gom3simFC
load("basecase15gom1gam2gom3.RData")
gom1gam2gom3simFCmon <- gom1gam2gom3simFC
gom1gam2gom3simFC <- semiMarkov(ncovs=c(1,1,1),
covs=rbind("treat", "treat", "treat"),
coveval=rbind(0,0,0),
dist=cbind("gom", "gam", "gom"),
timeseq=seq(0,4,1/12),
timeseq_ext=c(seq(49/12,100/12,1/12),
seq(100/12+1/144, 12, 1/144),
seq(12+1/600,15, 1/600)),
trans=tmat2, M=5000)
gom1gam2gom3simFCmon <- gom1gam2gom3simFC
gom1gam2gom3simFCmon <- subset(gom1gam2gom3simFCmon,is.wholenumber(gom1gam2gom3simFCmon[,1]*12)==1)
### RFC treatment arm
### mean life years in initial progression-free state
(RFCmeanLYPFSdis <- meanLY(object=gom1gam2gom3simRFCmon, state=1,instate=TRUE,discounted=TRUE, rate=0.035))
### mean life years in progression
(RFCmeanLYprogdis <- meanLY(object=gom1gam2gom3simRFCmon, state=2,instate=TRUE,discounted=TRUE, rate=0.035))
### FC treatment arm
### mean life years in initial progression-free state
(FCmeanLYPFSdis<-meanLY(object=gom1gam2gom3simFCmon,state=1,instate=TRUE,discounted=TRUE, rate=0.035))
### mean life years in progression
(FCmeanLYprogdis<-meanLY(object=gom1gam2gom3simFCmon,state=2,instate=TRUE,discounted=TRUE, rate=0.035))
cost_support_PFS_RFC<- 28*12*RFCmeanLYPFSdis
cost_support_PFS_FC<- 28*12*FCmeanLYPFSdis
getwd()
data <- read.table("data.txt",sep="\t",skip=1)
names(data) = c("patid","treat",
"prog","death",
"prog_t","death_t",
"progdeath",
"progdeath_t")
data %>% glimpse()
install.packages("Urltools")
install.packages("urltools")
getwd()
library(mstate)
library(eha)
library(caTools)
library(mc2d)
library(msm)
library(cmprsk)
library(flexsurv)
library(BBmisc)
source("function modelparam.R")
source("function Markov.R")
source("function semiMarkov.R")
source("function visualMarkov.R")
source("function visualsemiMarkov.R")
#source("function proportion.R") not run - requires actual data
source("function meanLY.R")
source("function PSAprob.R")
source("function PSAmeanLY.R")
source("function PSAQALY.R")
source("function CEplane.R")
source("function CEAC.R")
data <- read.table("data.txt",sep="\t",skip=1)
names(data) = c("patid","treat",
"prog","death",
"prog_t","death_t",
"progdeath",
"progdeath_t")
data %>% glimpse()
library(tidyverse)
data %>% glimpse()
View(Markov)
library(mstate)
library(eha)
library(caTools)
library(mc2d)
library(msm)
library(cmprsk)
library(flexsurv)
library(BBmisc)
library(tidyverse)
data <- read.table("data.txt",sep="\t",skip=1)
names(data) = c("patid","treat",
"prog","death",
"prog_t","death_t",
"progdeath",
"progdeath_t")
data %>% glimpse()
summary(data)
data$progdeath
